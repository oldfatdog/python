1.  **递归在编程上的形式是如何表现的呢**

    在编程上，递归表现为函数调用本身这么一个行为

2.  **递归必须满足哪两个基本条件？？**

    1.  调用了自己
    2.  有正确的返回值

3.  **思考一下，按照递归的特性，在编程中有没有不得不使用递归的情况？**

    例如汉诺塔，目录索引（因为你永远不知道这个目录里边是否还有目录），快速排序（二十世纪十大算法之一），树结构的定义等如
    事半功倍，否则会导致程序无法实现或相当难以理解。

4.  **用递归去计算阶乘问题或斐波那契数列是很糟糕的算法，你知道为什么吗？**

    小甲鱼在课程的开头说“普通程序员用迭代，天才程序员用递归”这句话是不无道理的。
     但是你不要理解错了，不是说会使用递归，把所有能迭代的东西用递归来代替就是“天才程序员”了，恰好相反，如果你真的这么做的话
     ，那你就是“乌龟程序员”啦。
     为什么这么说呢？不要忘了，递归的实现可以是函数自个儿调用自个儿，每次函数的调用都需要进行压栈、弹栈、保存和恢复寄存器的栈
     上边是非常消耗时间和空间的。
     另外，如果递归一旦忘记了返回，或者错误的设置了返回条件，那么执行这样的递归代码就会变成一个无底洞：只进不出！所以在写递归的时候，千万要记住口诀：递归递归，归去来兮！出来混，总有一天是要还的！

5.  **请聊一聊递归的优缺点（无需官方陈词，想到什么写什么就可以）**

    优点：
    1）递归的基本思想是把规模大的问题转变成规模小的问题组合，从而简化问题的解决难度（例如汉诺塔游戏）。
    2）有些问题使用递归使得代码简洁易懂（例如你可以很容易的写出前中后序的二叉树遍历的递归算法，但如果要写出相应的非递归
    者可以做到的了。）
    缺点：
    1）由于递归的原理是函数调用自个儿，所以一旦大量的调用函数本身空间和时间消耗是“奢侈的”。
    2）初学者很容易错误的设置了返回条件，导致递归代码无休止调用，最终栈溢出，程序崩溃。

6.  **拿手机拍一张“递归自拍照片”**

    其实就是人拿着你拍好的照片在拍照

7.  

    

### 编程题

1.  **使用递归编写一个power()函数模拟内建函数pow()，即power(x, y)为计算并返回x的y次幂的值.**

    ```python
    #常规写法：
    def power(x,y):
        result = 1
        for i in range(y):
            result *= x
        return result
    -----------------------------------------------
    
    #递归写法：
    def power(x,y):
        if y == 0:
            return 1
        else:
            return x * power(x,y-1)
    
    a = power(2,3)
    print(a)
    
    输出：
    8
    ```

2.  **使用递归编写一个函数，利用欧几里得算法求最大公约数，例如gcd(x, y)返回值为参数x和参数y的最大公约数。**

    ```python
    #常规写法
    def gcd(x, y):
        while y:            # -->6        -->4        -->2         -->0
            t = x % y       # -->4%6=4    -->6%4=2    -->4%2 =0     
            x = y           #  -->6        -->4        -->2
            y = t           # -->4        -->2        -->0
    
        return x
    ------------------------------------------------------
    
    #递归写法
    def gcd(x,y):
        if y:
            return gcd(y,x%y)
        else:
            return x
    
    
    print(gcd(0, 9))
    print(gcd(11, 9))
    print(gcd(33, 9))
    
    输出：
    9
    1
    3
    ```

3.  请写下这一节课你学习到的内容：格式不限，回忆并复述是加强记忆的好方式！

    递归：是属于算法的范畴。 递归就是函数调用自身的一种行为。
    再举个例子加深印象：

    ```python
    #常规写法：
    
    def factorial(n):
        result = n
        for i in range(1, n):
            result *= i
    
        return result
    
    number = int(input('请输入一个正整数：'))
    result = factorial(number)
    print("%d 的阶乘是：%d" % (number, result))
    
    
    ------------------------------------------------
    #递归写法：
    
    def factorial(n):
        if n == 1:
            return 1
        else:
            return n * factorial(n-1)
    number = int(input('请输入一个正整数：'))
    result = factorial(number)
    print("%d 的阶乘是：%d" % (number, result))
    ```

    

